/***
|''Name''|ListFiltrPlugin|
|''Author''|[[Tobias Beer|http://tobibeer.tiddlyspace.com]]|
|''Documentation''|http://listfiltr.tiddlyspace.com|
|''Source''|https://raw.github.com/tobibeer/TiddlyWikiPlugins/master/plugins/ListFiltrPlugin.min.js|
|''~CoreVersion''|2.6.5|
|''License''|Creative Commons 3.0|
|''Version''|1.0|
/%***/
(function (e) { config.macros.listfiltr = { handler: function (t, n, r, i, s, o) { var u, a, f, l, c, h, p = "lf-" + (new Date).formatString("YYYYMMDDhhmmss") + Math.random().toString().substr(6); c = e(t).children().last(); while (c.is("br")) c = c.prev(); if (c.is("span,div")) c = c.contents(); c.wrapAll('<div class="lf-list ' + p + '"/>'); c = e("." + p); c.css("height", c.height()); c.contents().filter(function () { return this.nodeType == Node.TEXT_NODE }).wrap('<span class="lf-p"/>'); e(".lf-p", c).next("br").addClass("lf-no-br"); if (e.fn.outline) e("ol:not(ol li > ol)", c).outline(); f = e("<div class=lf-search/>").insertBefore(c); a = e("<span class=lf-label/>").html("Filter list:").appendTo(f); u = e('<input type="search"/>').attr({ title: "enter your search term here" }).appendTo(f); u.data("list", p).bind("keyup search", function () { var t, n, r, i, s = e(this), o = s.val(), u = s.data("list"), a = e("." + u); e("li,dd,dt,span,div", a).removeClass("lf-hide lf-found lf-not").each(function (i) { var s, u, a = e(this); if (o.length > 1) { r = a.clone().children().remove().end().text(); t = a.children().not("dl,ol,ul").clone().remove("dl,ol,ul,dl *,ol *,ul *"); r = r + " " + t.text(); t.each(function (t) { var n = e(this), i = n.hasClass("externalLink") ? n.attr("href").replace("http://", "") : null; tid = n.attr("tiddlyLink"); r += " " + (i ? i : "") + (tid ? " " + tid : "") }); n = r.toLowerCase().indexOf(o.toLowerCase()) > -1; a.not(".pseudo-ol-li").addClass("lf-" + (n ? "found" : "hide")); if (a.is("dt")) { u = a.next("dd"); if (n) u.addClass("lf-not") } if (a.is("dd")) { s = a.prev("dt"); if (n) { if (!s.hasClass("lf-found")) s.addClass("lf-not").removeClass("lf-hide") } else if (s.hasClass("lf-found")) { a.removeClass("lf-hide") } } } }); e(".highlight:not(.tiddlyLink,.externalLink)", a).each(function () { e(this).after(e(this).text()) }).remove(); e(".highlight", a).removeClass("highlight"); e("br:not(.lf-no-br)", a).show(); if (o.length > 1) { e("br", a).hide(); e(".lf-found", a).each(function (t) { e(this).parentsUntil(i, ".lf-hide").removeClass("lf-hide").not(".pseudo-ol-li").addClass("lf-not") }); e(".lf-found", a).each(function (t) { e(".lf-hide", this).removeClass("lf-hide").not(".pseudo-ol-li").addClass("lf-not") }); e.fn.highlight = function (t) { var n = new RegExp("(\\b\\w*" + t + "\\w*\\b)", "gi"), r = '<span class="highlight">$1</span>'; this.each(function () { e(this).contents().each(function () { if (this.nodeType === 3 && n.test(this.nodeValue)) { e(this).replaceWith(this.nodeValue.replace(n, r)) } else if (!e(this).hasClass("highlight")) { e(this).highlight(t) } }) }); return this }; e("*", a).highlight(o); e(".externalLink, .tiddlyLink", a).each(function () { var t = e(this), n = t.hasClass("tiddlyLink") ? t.attr("tiddlylink") : t.attr("href").replace("http://", ""); if (o.length > 1 && n.indexOf(o) > -1) t.addClass("highlight") }) } return true }) } }; config.shadowTiddlers["StyleSheetListFiltr"] = "/*{{{*/\n" + ".lf-search {padding:5px;background:#eef;}\n" + ".lf-hide {display:none !important;}\n" + ".lf-found {background:#F5F5DC;}\n" + ".lf-not {background:white;}\n" + ".lf-list {max-height: 250px;overflow: auto;}\n" + ".lf-list + br {display:none;}\n" + ".lf-label {margin-right:5px;font-weight:bold;}\n" + ".lf-p {display:block;}" + ".lf-no-br {display:none;}" + "/*}}}*/"; store.addNotification("StyleSheetListFiltr", refreshStyles) })(jQuery)
//%/