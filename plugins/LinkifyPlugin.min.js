/***
|''Macro''|LinkifyPlugin|
|''Description''|Automatically turns text into links, optionally using aliases<br>The plugin is based on Clint Checketts and Paul Petterson's [[RedirectMacro|http://checkettsweb.com/styles/themes.htm#RedirectMacro]]|
|Documentation|http://linkify.tiddlyspot.com|
|''Author''|Tobias Beer|
|''Version''|1.0 beta|
|''CoreVersion''|2.5.0|
|''Source''|https://raw.github.com/tobibeer/TiddlyWikiPlugins/master/plugins/LinkifyPlugin.min.js|
|''Usage''|define redirects in LinkifyConfig|
/%***/
(function (e) { function t(e) { var t = config.extensions.linkify; t.defaults.linkifyAllTiddlers = e; t.init() } config.shadowTiddlers.LinkifyConfig = "!Exclude\n-excludeLists systemConfig noLinkify\n!Linkify\nLinkifyPlugin|^linkif\n^Tiddler"; config.extensions.linkify = { defaults: { linkifyAllTiddlers: true }, linkified: [], excluded: [], handler: function (e) { var t, n, r = config.extensions.linkify, i = story.findContainingTiddler(e.output); i = i ? i.getAttribute("tiddler") : ""; t = i.indexOf("##"); if (t < 0) t = i.indexOf("::"); if (t > 0) i = i.substr(0, t); n = e.source.substr(e.matchStart, 1) == config.textPrimitives.unWikiLink; if (n || i && r.excluded.contains(i)) { e.outputText(e.output, e.matchStart + (n ? 1 : 0), e.nextMatch) } else { e.outputText(createTiddlyLink(createTiddlyElement(e.output, "span", null, "linkified"), this.target, false), e.matchStart, e.nextMatch) } }, addFormatter: function (e, t, n, r, i) { var s, o, u = 0, a, f, l, c, h, p, d, v, m = config.extensions.linkify, g = config.formatters, y = e.substr(0, 1); if (e.substr(e.length - 1, 1) == "*") { v = true; e = e.substr(0, e.length - 1) }e: while (!s && ['"', "~", "^", "*", "("].contains(y)) { switch (y) { case "~": if (r) return false; case "^": p = true; break; case '"': s = e.substr(e.length - 1, 1) == '"'; if (s) e = e.substr(0, e.length - 1); else break e; break; case "(": d = e.substr(e.length - 1, 1) == ")"; if (d) e = e.substr(0, e.length - 1); else break e; break; case "*": h = true } e = e.substr(1); y = e.substr(0, 1) } if (!d) e = e.replace(/\\/mg, ""); f = "linkify_" + e.replace(/([\W])/mg, function (e) { return e.charCodeAt(0) }); if (i) { l = "linkify_" + i.replace(/([\W])/mg, function (e) { return e.charCodeAt(0) }) } while (u < g.length) { o = o || g[u].name == f; if (i && g[u].name == l) { g.splice(u, 1) } else u++ } if (o || n || !e) return false; c = config.textPrimitives.unWikiLink + "?" + (d ? "(?:%2)" : "(?:\\b%0%2%1\\b)").format([h ? "[\\w]*" : "", v ? "[\\w]*" : "", d ? e : e.escapeRegExp().replace(/([a-z]|[A-Z])/img, function (e) { return "[" + (s ? e : /[\W]/mg.exec(e) ? "'" + e : e.toUpperCase() + e.toLowerCase()) + "]" }).replace(/[\s]/mg, "[\\s]")]); a = { name: f, match: c, target: t, handler: m.handler }; if (p) g.unshift(a); else g.push(a); return true }, indexConfig: function () { var e, t, n, r, i, s, o, u, a, f, l, c, h = config.extensions.linkify, p = config.formatters, d = function (e) { e = e.replace(/^(\'|\*|\^|\~|\()+/mg, ""); return e.replace(/(\*|\))+?/mg, "") }; h.linkified = []; o = store.getTiddlerText("LinkifyConfig") || store.getShadowTiddlerText("LinkifyConfig"); o = o ? o.split("\n") : []; for (var v = 0; v < p.length; v++) { if (p[v].name.indexOf("linkify_") == 0) { p.splice(v, 1); v-- } } for (i = 0; i < o.length; i++) { if (!o[i] || [" ", "!"].contains(o[i][0])) continue; s = o[i].split("|"); f = d(s[0]); t = 0; h.linkified.pushUnique(f); for (e = 1; e < s.length; e++) { u = d(s[e]); if (u.toLowerCase().indexOf(f.toLowerCase()) == 0) { c = s[e]; s[e] = s[t]; s[t] = c; t = e } } for (e = 0; e < s.length; e++) h.addFormatter(s[e], f, false, e == t) } if (h.defaults.linkifyAllTiddlers) { l = store.getTiddlers(); for (a = 0; a < l.length; a++) { f = l[a].title; h.addFormatter(f, f, h.excluded.contains(f) || h.linkified.contains(f)) } } }, indexExcludes: function () { var e, t = "", n, r, i = config.extensions.linkify, r = store.getTiddlerText("LinkifyConfig") || store.getShadowTiddlerText("LinkifyConfig"); i.excluded = []; r = r ? r.split("\n") : []; for (n = 0; n < r.length; n++) if (r[n].indexOf("-") == 0) t += r[n].substr(1, r[n].length - 1) + " "; t = t.readBracketedList(); t.map(function (e) { i.excluded.pushUnique(e) }); for (e = 0; e < t.length; e++) store.getTaggedTiddlers(t[e]).map(function (e) { i.excluded.pushUnique(e.title) }) }, init: function () { this.indexConfig(); this.indexExcludes(); formatter = new Formatter(config.formatters) } }; config.extensions.linkify.init(); store.saveTiddler_Linkify = store.saveTiddler; store.saveTiddler = function (e, t) { var n = store.saveTiddler_Linkify.apply(this, arguments), r = config.extensions.linkify, i = t; r.addFormatter(i, i, r.excluded.contains(i) || r.linkified.contains(i), true, i != e ? e : null); if (e == "LinkifyConfig" || t == "LinkifyConfig") { r.indexConfig() } r.indexExcludes(); formatter = new Formatter(config.formatters); story.refreshAllTiddlers(true); return n }; store.removeTiddler_Linkify = store.removeTiddler; store.removeTiddler = function (e) { var t = store.removeTiddler_Linkify.apply(this, arguments); config.extensions.linkify.addFormatter("*", null, null, null, e); formatter = new Formatter(config.formatters); story.refreshAllTiddlers(true); return t }; config.shadowTiddlers.StyleSheetLinkify = "/*{{{*/\n" + ".linkified .tiddlyLink{color:[[ColorPalette::PrimaryMid]];font-weight:normal;}\n" + ".linkified .tiddlyLink:hover{color:[[ColorPalette::PrimaryLight]];background:transparent;}\n" + ".headerShadow .linkified .tiddlyLink {color:transparent !important;}\n" + ".siteSubtitle .linkified .tiddlyLink{color:[[ColorPalette::PrimaryPale]];background:transparent;}\n" + ".siteSubtitle .linkified .tiddlyLink:hover{color:[[ColorPalette::Background]];background:transparent;}\n" + "dt .linkified .tiddlyLink{font-weight:bold;}\n" + "/*}}}*/"; store.addNotification("StyleSheetLinkify", refreshStyles) })(jQuery)
//%/