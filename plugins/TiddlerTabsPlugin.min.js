/***
|Name|TiddlerTabsPlugin|
|Version|0.9.1 beta|
|Documentation|http://tiddlertabs.tiddlyspace.com|
|Author|[[Tobias Beer|http://tobibeer.tiddlyspace.com]]|
|~CoreVersion|2.6.2|
|''Source''|https://raw.github.com/tobibeer/TiddlyWikiPlugins/master/plugins/TiddlerTabsPlugin.min.js|
|License|Creative Commons 3.0|
/%***/
(function (e) { config.macros.tiddlerTabs = { fmtSubTitle: "\n{{ttTitle{%0}}}", fmtListItem: "\n[[%0]]", defaultGroup: 3, defaultSub: 3, defaultRanges: "az 09 _ *", caseInsensitive: true, onlyRanges: true, specialChars: /[\W\_]+/, minSubLength: 5, subTitles: true, subTitleMaxLength: 3, txtTabTitle: 'list tiddlers in "%0"', handler: function (t, n, r, i, s, o) { function nt(e, t) { c.pushUnique(e); if (!S[e]) S[e] = t && isNaN(t) ? [t] : []; else S[e].push(t); if (!isNaN(t)) { O[e] = t } } function rt(e) { return !e ? null : Y ? e.toUpperCase() : e } function it(e) { var t; e--; do { e++; t = c[e] } while (S[t] && S[t].length < 1); return { i: e, l: t } } var u, a, f, l, c = [], h = [], p, d, v, m, g = 0, y, b, w, E, S = {}, x = [], T = 0, N, C, k, L, A, O = {}, M, _ = "", D, P = 0, H, B, j, F, I, q, R, U = "", z, W = "", X, V, J = s.parseParams(null, null, true), K = getParam(J, "name", e("#tiddlerDisplay").html().length % 1e5), Q = parseInt(getParam(J, "group", 0)), G = parseInt(getParam(J, "sub", 0)), Y = getParam(J, "caseInsensitive", null), Z = getParam(J, "ranges", this.defaultRanges).split(" "), et = getParam(J, "onlyRanges", this.onlyRanges), tt = store.getTiddlers("title"); Y = Y == null ? this.caseInsensitive : Y.toString().toLowerCase() == "true"; et = et == null ? this.onlyRanges : et.toString().toLowerCase() == "true"; if (Y) tt.sort(function (e, t) { var n = String(e.title).toUpperCase(); var r = String(t.title).toUpperCase(); if (n > r) return 1; if (n < r) return -1; return 0 }); Q = isNaN(Q) || Q < 1 ? this.defaultGroup : Q; G = isNaN(G) || G < 1 ? this.defaultSub : G; if (Z[0]) { for (k = 0; k < Z.length; k++) { L = Z[k].substr(0, 1); if (L == "*") nt("*", k); else if (L == "^") Y = true; else if (Z[k].length == 1) nt(L, k); else { L = rt(L); A = rt(Z[k].substr(Z[k].length - 1, 1)); d = L.charCodeAt(0) - 1; v = A.charCodeAt(0); do { d++; nt(String.fromCharCode(d), k) } while (d < v) } } } for (z = 0; z < tt.length; z++) { X = tt[z].title; d = X.substr(0, 1); if (!c.contains(rt(d))) d = this.specialChars.exec(d) ? "*" : rt(d); if (Z[0] && et && !c.contains(d)) continue; nt(d, X) } u = C = it(0); while (C.l && u.i < c.length) { u = e.extend({}, C); C = it(u.i + 1); if (g == 0) { a = u.i; x[T] = ""; h[T] = [] } N = O[u.l] != O[C.l]; if (Q < 3 || g == 0 || N || Q > 2 && g == Q - 1 || u.i == c.length - 1) x[T] += u.l; else if (Q > 2 && g == 1) { if (u.i < c.length - Q + 1) { x[T] += "-" } else { f = c[a]; l = c[u.i]; x[T] += f == l ? "..." : (f.charCodeAt(0) < l.charCodeAt(0) + 2 ? "" : "-") + l } } h[T] = h[T].concat(S[u.l]); g++; if (g == Q || N) { g = 0; N = false; if (!h[T][0]) { h.pop(); x.pop() } else { T++ } } } D = "TiddlerTabs_" + K; for (T = 0; T < h.length; T++) { p = G + 1; do { p--; H = Math.floor(h[T].length / p) + 1 } while (H < Math.max(this.minSubLength, p) && p > 1); tab = x[T]; W += "\n" + tab + " '" + this.txtTabTitle.format([tab]) + "' [[" + D + "##" + tab + "]]"; tt = B = j = q = ""; E = 0; for (z = 0; z < h[T].length; z++) { if (P == 0) I = z; q += this.fmtListItem.format([h[T][z]]); P++; if (P == H || z == h[T].length - 1) { R = ""; P = b = 0; if (this.subTitles) { while (B == j) { b++; if (E > 0 && b < E) b = E; B = rt(h[T][I].substr(0, b)); j = rt(h[T][z].substr(0, b)); if (I == z || b == this.subTitleMaxLength) { j = ""; break } } E = b; y = B.substr(0, this.subTitleMaxLength); m = j ? B : y == w ? " " : y + " ... "; V = rt(h[T][z].substr(0, b)); R = m == " " ? "... " + V : m + (j ? " ... " + j : ""); R = p < 2 ? "" : this.fmtSubTitle.format([R]) } tt += "{{ttSub ttSub" + p + "{ {{ttInner{" + R + q + " }}} }}}"; w = y; B = j = q = "" } } _ += "\n!" + tab + "\n" + tt + "{{ttClear{ }}}" } config.shadowTiddlers[D] = "{{ttTabs{<<tabs txt" + D + W + "\n>>}}}/%" + _ + "\n!END%/"; wikify("<<tiddler [[" + D + "]]>>", t) } }; var t, n = ""; for (t = 1; t < 10; t++) n += "\n.ttSub" + t.toString() + "{\n	width:" + Math.floor(100 / t).toString() + "%;\n}"; config.shadowTiddlers["StyleSheetTiddlerTabs"] = "/*{{{*/" + "\n.ttTabs .tab{\n	padding:3px 5px 2px 5px;margin: 0 0 0 1px;\n	border:1px solid transparent;\n	border-bottom:none;\n}" + "\n.ttTabs .tabSelected{\n	border-color: [[ColorPalette::TertiaryLight]];\n}" + "\n.ttTitle{\n	display:block;\n	font-size:1.2em;margin: 0 10px -10px 0;padding-left:10px;border-bottom:1px solid #aaa;\n}" + "\n.ttInner{\n	margin:0 5px;\n}" + "\n.ttClear{\n	display:block;\n	clear:both;\n}" + "\n.ttSub{\n	display:block;\n	float:left;overflow:hidden;\n}" + "\n" + n + "\n" + "/*}}}*/"; store.addNotification("StyleSheetTiddlerTabs", refreshStyles) })(jQuery)
//%/