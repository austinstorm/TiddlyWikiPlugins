/***
|''Name''|GetPlugin|
|''Author''|[[Tobias Beer|http://tobibeer.tiddlyspace.com]]|
|''Description''|fetch and output a (list of) tiddler, section, slice or field using a predefined or custom format|
|''Source''|https://raw.github.com/tobibeer/TiddlyWikiPlugins/master/plugins/GetPlugin.min.js|
|''Documentation''|http://get.tiddlyspace.com|
|''Version''|0.9.5 2012-02-10 BETA|
|''~CoreVersion''|2.6.2|
|''License''|Creative Commons 3.0|
/%***/
(function (e) { config.shadowTiddlers.merge; config.macros.get = { dict: { errFunction: "Function undefined!", errFunctionInfo: "config.macros.get.get%0 is not a valid function!", defaultCategory: "Tiddler" }, template: { tiddler: "![[%1]]\n%0", section: "!%3 / [[%1]]\n%0", slice: ";%3\n:» %0", field: ";%3\n:» %0", tiddlerList: "!![[%1]]\n%0", sectionList: "!![[%1]]\n%0", sliceList: ";[[%1]]\n:» %0", fieldList: ";[[%1]]\n:» %0", tiddlerTable: "|[[%1]]|<<tiddler [[%4]]>>|", sectionTable: "|[[%1]]|<<tiddler [[%4]]>>|", sliceTable: "|[[%1]]|<<tiddler [[%4]]>>|", fieldTable: "|[[%1]]|%0|\n", tiddlerTableHead: "| !%0 | !Text |h", sectionTableHead: "| !%0 | !%1 |h", sliceTableHead: "| !%0 | !%1 |h", fieldTableHead: "| !%0 | !%1 |h", tableClass: "getTable", dateFormat: "0DD.0MM.YYYY" }, handler: function (t, n, r, i, s, o) { if (!s) return; var u = 0, a = "", f = [], l, c = "", h, p, d, v, m = e(t), g = m.attr("macroName") == "get", y = r[0], b = s.parseParams("anon", null, true), w = this[getParam(b, "exec", "getValues")], E = getParam(b, "format", ""), S = store.getTiddlerText(getParam(b, "template", "")), x = getParam(b, "filter"), T = r.contains("plain"), N = r.contains("table") ? "Table" : x || r.contains("list") ? "List" : "", C = N.toLowerCase(), k = null != getParam(b, y, null), L = config.filters.get.delimiterRegExp.exec(y), o = L ? L[1] : y, A = L ? L[2] : "", O = L ? L[3] : "", M = A == "##" ? "section" : A == "::" ? "slice" : A == "??" ? "field" : "tiddler", _ = getParam(b, "valueprefix", ""), D = getParam(b, "prefix", ""), P = getParam(b, "suffix", ""), H = getParam(b, "category", this.dict.defaultCategory), B = getParam(b, "header", C != "table" ? "" : "|" + this.template.tableClass + " " + this.template.tableClass + M.toUpperCase() + "|k\n" + this.template[M + "TableHead"].format([H, O])), j = getParam(b, "footer", ""), F = getParam(b, "separator", "\n"), I = story.findContainingTiddler(t); o = o ? o : I ? I.getAttribute("tiddler") : ""; if (!o) return; l = T ? "%0" : E ? E : S ? S : this.template[A == "##" ? "section" + N : A == "::" ? "slice" + N : A == "??" ? "field" + N : "tiddler" + N]; if (w) { v = w.call(this, s, (C ? "" : o) + A + O, o, M, O, C) } else { createTiddlyError(t, this.dict.noFunction, this.dict.errFunctionInfo.format([get])); return false } do { u++; f.push(a); a = getParam(b, "$" + u, null) } while (a != null); for (p = 0; p < v.length; p++) { h = v[p][0]; d = _ + v[p][1]; d = d.indexOf("***/\n") != 0 ? d : d.substr(5); for (u = 1; u < f.length; u++) { d = d.replace(new RegExp("\\$" + u, "mg"), f[u]) } c += (D + l.format([d, h, M, O, (C ? h : "") + y, H]) + P).replace(/\$count/mg, String.zeroPad(p + 1, v.length.toString().length)) + (C && p < v.length - 1 ? F : "") } c = (B ? B + "\n" : "") + c + (j ? "\n" + j : ""); if (!g) { m = e("<span />"); m.appendTo(t); t = m[0] } wikify(e.trim(c), t); if (!g) m.attr({ refresh: "macro", macroName: "get", params: s }) }, refresh: function (t, n) { e(t).empty(); this.handler(t, "get", n.readMacroParams(), null, n) }, getValues: function (e, t, n, r, i, s) { var o, u, a, f, l, c = [], h = e.parseParams("getval", null, true), p = getParam(h, "filter", null); f = s ? p ? store.filterTiddlers(p) : store.getTiddlers("title") : [{ title: n }]; for (u = 0; u < f.length; u++) { a = f[u].title; l = r == "field" ? store.getValue(a, i) : store.getTiddlerText((s ? a : "") + t); o = l && l.length == 12 ? Date.convertFromYYYYMMDDHHMM(l) : undefined; if (o && !isNaN(o.getMonth)) l = o.formatString(this.template.dateFormat); if (l) c.push([a, l]) } return c } }; config.filters.get = function (e, t) { var n = config.filters.get.delimiterRegExp.exec(t[3]), r = n ? n[1] : t[3], i = n ? n[2] : "", s = n ? n[3] : ""; store.forEachTiddler(function (t, n) { if (r && r == t || !r && (i == "??" && store.getValue(t, s) || store.getTiddlerText(t + i + s))) e.pushUnique(n) }); return e }; config.filters.get.delimiterRegExp = /(.*)?(\#\#|::|\?\?)(.*)/ })(jQuery)
//%/