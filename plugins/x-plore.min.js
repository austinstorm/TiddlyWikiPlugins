/***
|''Name:''|x-plore|
|''Description''|Explore tiddler relations|
|''Version:''|0.2|
|''Type''|macro|
|''Author:''|[[TobiasBeer]]|
|''Source:''|https://raw.github.com/tobibeer/TiddlyWikiPlugins/master/plugins/x-plore.min.js|
|''License''|[[Creative Commons Attribution-Share Alike 3.0|http://creativecommons.org/licenses/by-sa/3.0/]]|
|''Note''|idea and parts of the code have their roots in [[RelatedTiddlersPlugin|http://tiddlytools.com/#RelatedTiddlersPlugin]]|
/%***/
config.macros.xplore = { skipped: " ...", lblBtn: "x-plore" + (document.all ? "▼" : "▾"), topBtn: "Explore tiddler relations", lblTagging: "!!tagged by", lblTags: "!!tagging to", lblRefs: "!!referenced by", lblLinks: "!!linking to", styles: "#popup #xplore div {text-decoration:none;padding:7px;min-width:136px;_width:180px;}" + "#popup #xplore div a {padding:2px;white-space:nowrap;font-weight:normal;display:block;}" + "#popup #xplore blockquote {padding-left:3px;margin:0;}" + "#popup #xplore blockquote blockquote {border-left:1px solid #333;margin:0 0 0 10px;}" + "#popup #xplore blockquote a {_width:90%;}" + "#popup #xplore h2 {border:0;margin-top:0.5em;}" + "#popup #xplore td {border:1px solid transparent !important;padding: 0 5px 5px 5px !important;}" + "#popup #xplore td:hover{border:1px solid #333 !important;}" + "#popup #xplore div br {display:none;}", handler: function (e, t, n, r, i, s) { var o, u, a, f, l, c, h, p, d, v, m, g, y; d = story.findContainingTiddler(e); v = d ? d.getAttribute("tiddler") : ""; o = i.parseParams(null, null, true); u = getParam(o, "button", "").toString() == "true"; p = getParam(o, "toolbar", "").toString() == "true"; if (u && v) { u = createTiddlyButton(e, this.lblBtn, this.tipBtn, this.click, "button", "xploreBtn"); u.setAttribute("tiddler", v); u.setAttribute("params", i); if (p) u.setAttribute("toolbar", true); return } l = getParam(o, "first", v); a = getParam(o, "class", ""); m = getParam(o, "tree", "true") == "true"; var b = function (e) { var t = getParam(o, e, "").readBracketedList(), n = t[0], r, i, s, u, a = []; if (n && n.substr(0, 5).toUpperCase() == "GET==") { s = store.getTiddlerText(n.substr(5)); if (a) { t = s.readBracketedList(); for (r = 0; r < t.length; r++) { n = t[r]; if (n && n.substr(0, 5).toUpperCase() == "TAG==") { t.splice(r, 1); u = store.getTaggedTiddlers(n.substr(5)); for (i = 0; i < u.length; i++) a.pushUnique(u[i].title) } } for (r = 0; r < a.length; r++) t.pushUnique(a[r]); t.sort() } } return t }; f = b("exclude"); g = b("truncate"); y = getParam(o, "root", "") == "true"; c = getParam(o, "minimal", "") == "true"; h = getParam(o, "mode", ""); if (h != "") { if (this["get" + h] == undefined) h = "Tagging"; wikify(this["lbl" + h] + "\n" + this.list(l, m, g, f, this["get" + h], y, c), e) } else { wikify("|" + a + "|k\n|||||", e); var w = e.lastChild.getElementsByTagName("td"); wikify(this.lblTagging + "\n" + this.list(l, m, g, f, this.getTagging, y, c), w[0]); wikify(this.lblTags + "\n" + this.list(l, m, g, f, this.getTags, y, c), w[1]); wikify(this.lblRefs + "\n" + this.list(l, m, g, f, this.getRefs, y, c), w[2]); wikify(this.lblLinks + "\n" + this.list(l, m, g, f, this.getLinks, y, c), w[3]) } }, list: function (e, t, n, r, i, s, o) { var u, a = [], f = { text: "" }, l = "", c = o ? undefined : []; a = this.search(e, a, f, l, n, r, i, s, c); setStylesheet(this.styles, "xploreStyles"); u = "{{xploreList{\n"; if (t) u += f.text; else if (a.length > 0) u += "[[" + a.join("]][[") + "]]"; return u + "}}}" }, search: function (e, t, n, r, i, s, o, u, a, f, l) { var c = store.getTiddler(e); var h = false; var p = a != undefined; if (p && f == undefined) { f = 0; a[f] = []; h = true } if (l == undefined) l = e; if (!c || e == l && t.length > 0 || c.tags.containsAny(s) || p && a[f].contains(c) || !p && t.contains(e)) return t; if (!h || u) { if (p) a[f].push(c); t.push(c.title); var d = i && i.contains(e); n.text += r + "[[" + e + (d ? this.skipped.format([e]) : "") + "|" + e + "]]" + "\n"; if (d) return t } var v = o ? o(c) : this.getTagging(c); if (p) for (var m = 1; m < v.length; m++) a[f + m] = a[f].slice(0); for (var m = 0; m < v.length; m++) t = this.search(v[m], t, n, r + ">", i, s, o, u, a, f ? f + m : f, l); return t }, getLinks: function (e) { if (!e.linksUpdated) e.changed(); return e.links }, getRefs: function (e) { var t, n = [], r = store.getReferringTiddlers(e.title); for (t = 0; t < r.length; t++) if (r[t].title != e.title) n.push(r[t].title); return n }, getTags: function (e) { return e.tags }, getTagging: function (e) { var t = [], n = store.getTaggedTiddlers(e.title); for (var r = 0; r < n.length; r++) if (n[r].title != e) t.push(n[r].title); return t }, click: function (e) { e = e || window.event; var t = Popup.create(this); wikify("<<xplore button:false first:'" + this.getAttribute("tiddler") + "' " + this.getAttribute("params") + ">>", createTiddlyElement(t, "span", "xplore", "xplore")); Popup.show(t, false); s = document.getElementById("sidebar"); if (this.getAttribute("toolbar")) { t.style.left = ""; t.style.right = 20 + (s ? s.offsetWidth : 0) + "px" } e.cancelBubble = true; if (e.stopPropagation) e.stopPropagation(); return false } }
//%/