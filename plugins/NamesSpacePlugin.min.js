/***
|''Name''|NameSpacePlugin|
|''Author''|[[Tobias Beer|http://tobibeer.tiddlyspace.com]]|
|''Documentation''|http://namespace.tiddlyspace.com|
|''Version''|1.0.2|
|''Source''|https://raw.github.com/tobibeer/TiddlyWikiPlugins/master/plugins/NamesSpacePlugin.js|
|''~CoreVersion''|2.6.5|
/%***/ (function (e) { config.macros.view.handler_NameSpace = config.macros.view.handler; config.macros.view.handler = function (e, t, n, r, i, s) { if (n.contains("namespace")) { wikify("<<ns [[" + s.title + "]] " + i + ">>", e) } else { return config.macros.view.handler_NameSpace.apply(this, arguments) } }; config.macros.ns = { defaults: { separator: ":", infoSource: "??ns_info", lnkInfo: "i", lnkInfoTooltip: "info for '%0'", btnLast: "»", txtListBullet: "» ", clear: "", btnTooltip: "tiddlers under namespace '%0'", txtNoneFound: "No futher items found.", txtMoreItems: "Further items...", lnkOpenElement: "Open '%0'", lnkOpenElementTooltip: "Click to open the tiddler '%0'...", txtTitleCategory: "%0 (category) ", txtTitleNameSpace: "%0 ...", txtTitleElement: "[%0]", btnAddLabelInline: "+", btnAddLabelCategory: "Add new category item...", btnAddLabelNameSpace: "Add new item...", btnAddTooltipCategory: "Add new category item under '%0'...", btnAddTooltipNameSpace: "Add new namespace item under '%0'...", btnAddTitleCategory: "New item for category %0", btnAddTitleNameSpace: "%0:NewItemTitle", btnAddItem: "<<newTiddler " + 'title:"%0" ' + 'label:"%1" ' + 'prompt:"%2" ' + 'fields:"%3" ' + ">>" }, handler: function (t, n, r, i, s, o) { var u = r[0]; r.shift(); if (!u) { u = story.findContainingTiddler(t); u = u ? u.getAttribute("tiddler") : "" } if (!u) return; var a = [], f, l = "", c, h, p, d, v, m, g, y, b, w, E, S, x = "", T, N, C, N, k, L = this.defaults, A = s.parseParams("anon", null, true), O = getParam(A, "ns", ""), l = getParam(A, "category", ""), d = getParam(A, "element", u), M = getParam(A, "separator", L.separator), _ = r.contains("readonly") || readOnly, D = new RegExp(getParam(A, "clear", L.clear)), P = function (e) { e.removeClass("button").addClass("tiddlyLink tiddlyLinkNonExisting") }; if (r.contains("popup")) { O = O ? O : u; if (this.getItems(u, O, M, l, 3) || !l && O != u) { e(createTiddlyButton(t, getParam(A, "label", O == u ? L.btnLast : M), getParam(A, "tooltip", L.btnTooltip.format([O])), this.click, "ns_btn ns_btn_popup")).data("params", { tid: u, ns: O, element: d, category: l, sep: M, readonly: _ }) } else if (O && O != u) { wikify('{{ns_btn{"""' + M + '"""}}}', t) } return } if (r.contains("list")) { O = u; tids = config.macros.ns.getItems(null, O, M, l, r.contains("category") ? 1 : r.contains("namespace") ? 2 : 0); for (y = 0; y < 2; y++) { lst = tids[y]; w = lst.length; if (!r.contains("notitles") && (y == 0 && w || y > 0)) { x += (y > 0 && tids[0].length ? "\n" : "") + "\n{{ns_title{[[" + L["txtTitle" + (y == 0 ? "Category" : "NameSpace")].format([O]) + "|" + O + "]]" + (_ ? "" : "{{ns_list_add{" + this.createButtonToAdd(null, O, y < 1 ? "Category" : "NameSpace", L.btnAddLabelInline) + "}}}") + "}}}"; info = tids[0].length && y > 0 ? "" : this.getInfo(O); if (info) x += "\n" + info } for (v = 0; v < w; v++) { m = lst[v]; p = m.split(M).length; if (y > 0 && v == 0) { N = [[O.split(M).length, O]] } else if (y == 0 && tids[2].contains(m)) { N = [[m.split(M).length, m]]; C = true } while (N.length && m.indexOf(N[N.length - 1][1]) != 0) { N.pop() } S = ""; for (h = N[0][0]; h < p + (y > 0 ? 0 : 1) ; h++) S += "*"; x += "\n" + S + (tids[2].contains(m) ? " {{ns_title{[[%0|%1]]%2}}}" : " {{ns_item{[[%0|%1]]%2}}}").format([C ? m : m.substr(N[N.length - 1][1].length + 1), m, _ ? "" : "{{ns_list_add{" + this.createButtonToAdd(null, m, "NameSpace", L.btnAddLabelInline) + "}}}"]); if (!C) N.push([p, m]); C = false } if (!_ && r.contains("notitles") && (w || y > 0 && !tids[0].length)) { x += "\n {{ns_list_add{" + this.createButtonToAdd(null, O, y < 1 ? "Category" : "NameSpace") + "}}}" } } wikify("{{ns_list{" + x + "\n}}}", t); P(e(".ns_list").last().find(".ns_add .button")); return } T = e(t).closest(".ns")[0] || createTiddlyElement(t, "span", null, "ns"); l = store.getValue(u, "ns_cat"); if (l) { wikify("[[" + l + "]]" + this.createButtonToAdd(null, l, "Category", L.btnAddLabelInline) + "<<ns [[" + u + "]] separator:[[" + M + "]] category:[[" + l + "]] popup>>", T) } a = u.split(M); for (g = 0; g < a.length; g++) { d = a[g]; O += g < 1 ? d : M + d; f = g > 0 && L.clear && D.exec(d); if (f || c) wikify("{{ns_clear{}}}", T); b = g == a.length - 1; if (b) wikify('{{tiddlyLink{"""' + d + '"""}}}', T); E = createTiddlyLink(T, O, null, b ? "ns_last" : ""); createTiddlyText(E, d); wikify(this.createButtonToAdd(null, O, "NameSpace", L.btnAddLabelInline) + "<<ns [[" + u + "]] ns:[[" + O + "]] element:[[" + d + "]] separator:[[" + M + "]] popup>>", T); c = f } e('<div class="ns_clear">').insertAfter(e(".title.ns")); e(T).find(".button").removeClass("button").addClass("ns_btn ns_btn_add"); e(T).attr("tabindex", "1").bind("mouseover mouseout keyup", function (t) { var n = e(this), r = t || window.event; if (r.type == "mouseover") { if (!r.ctrlKey || n.hasClass("ns_hover")) return true; e(".ns_btn_popup", n).hide(); e(".ns_btn_add", n).show(); e(".ns_last", n).show().prev().hide(); e(".tiddlyLink", n).each(function () { var t = e(this); t.attr("tiddlyLinkDefault", t.attr("tiddlyLink")); t.attr("tiddlyLink", t.text()) }); n.addClass("ns_hover") } else { if (!n.hasClass("ns_hover")) return true; e(".ns_btn_popup", n).show(); e(".ns_btn_add", n).hide(); e(".ns_last", n).hide().prev().show(); e(".tiddlyLink", n).each(function () { var t = e(this).attr("tiddlyLinkDefault"); if (t) e(this).attr("tiddlyLink", t) }); n.removeClass("ns_hover") } }) }, getItems: function (e, t, n, r, i) { var s, o, u, a, f, l, c = store.getTiddlers("title"), h = [[], [], []], p = !e; if (p) e = ""; for (f = 0; f < c.length; f++) { l = c[f].title, s = store.getValue(l, "ns_cat"), u = e.indexOf(l); if (p) { if (s == t) { h[2].push(l) } } else { if (!p && (l == e || u == 0 && e.substr(u, 1) == n || l == t)) continue; if (r && r == s || !r && e == t && t == s) h[0].push(l); if (r && l.indexOf(r + n) == 0 && l.substr(r.length + 1).indexOf(n) < 0 || !r && l.indexOf(t + n) == 0 && l.substr(t.length + 1).indexOf(n) < 0) h[1].push(l); if (i && h[0].length + h[1].length > 0) return true } } if (p) { for (f = 0; f < c.length; f++) { l = c[f].title; for (o = 0; o < h[2].length; o++) { s = h[2][o]; if ((!i || i == 1 || i == 3) && (l == s || l.indexOf(s + n) == 0)) { h[0].push(l); break } } if ((!i || i > 1) && l.indexOf(t + n) == 0) h[1].push(l) } } return i === 3 ? false : h }, click: function (t) { var n, r, i, s, o, u, a, f, l, c, h, p = config.macros.ns, d = p.defaults, n = t || window.event, v = Popup.create(this), m = e(this).data("params"), g = m["tid"], y = m["ns"], b = m["element"], w = m["category"], E = m["sep"], S = m["readonly"], x = w || g == y ? "" : store.getValue(y, "ns_cat"); e(v).addClass("popup popup_ns"); h = config.macros.ns.getItems(g, y, E, w ? w : y, 0); for (o = 0; o < 2; o++) { f = h[o]; u = f.length; if (o == 0 && x || w || h[0].length > 0 || o == 1 && !w || w && u > 0) { s = o > 0 ? w ? w : y : x ? x : w ? w : y; p.createListTitle(v, o > 0 ? "NameSpace" : "Category", s, x); i = o > 0 && h[0].length ? "" : p.getInfo(s); if (i) { wikify(i, createTiddlyElement(createTiddlyElement(v, "li"), "span", null, "popup_ns_info")) } } for (r = 0; r < u; r++) { p.createPrettyLink(createTiddlyElement(v, "li"), f[r], d.txtListBullet + f[r].split(E).pop()) } if (o > 0 && u == 0) createTiddlyElement(v, "li", null, "popup_ns_empty", d.txtNoneFound); if (!S && (o > 0 || u > 0 || w)) { it = o == 0 ? w ? w : y : y; p.createButtonToAdd(createTiddlyElement(v, "li", null, "ns_add"), it, o == 0 ? "Category" : "NameSpace") } } if (y != b) { p.createListTitle(v, "Element", b, true); i = p.getInfo(b); if (i) { wikify(i, createTiddlyElement(createTiddlyElement(v, "li"), "span", null, "popup_ns_info")) } } Popup.show(); n.cancelBubble = true; if (n.stopPropagation) n.stopPropagation(); return false }, getInfo: function (e) { var t = this.defaults.separator, n = this.defaults.infoSource, r = n.substr(0, 2), i = n.substr(2), s = e.split(t).pop(); return r == "??" ? store.getValue(e, i) : store.getTiddlerText(e + n + i) }, createPrettyLink: function (e, t, n) { var r = createTiddlyLink(e, t); createTiddlyText(r, n); return r }, createListTitle: function (e, t, n, r) { var i = config.macros.ns; i.createPrettyLink(createTiddlyElement(e, "li", null, "ns_title " + (r ? "popup_ns_hr" : "")), n, i.defaults["txtTitle" + t].format([n])) }, btnText: function (e, t, n, r) { var i = config.macros.ns.defaults, s = i["btnAdd" + e + t]; return n ? s.format(n) : n }, createButtonToAdd: function (e, t, n, r) { var i = config.macros.ns, s = i.defaults, o = [t], u = s["btnAddItem"].format([i.btnText("Title", n, o), r ? r : (e ? s.txtListBullet : "") + i.btnText("Label", n, o), i.btnText("Tooltip", n, o), n == "Category" ? "ns_cat:[[" + t + "]]" : ""]); if (e) wikify(u, e); return u } }; config.shadowTiddlers["StyleSheetNameSpace"] = "/*{{{*/\n%0\n/*}}}*/".format([store.getTiddlerText("NameSpacePlugin##CSS")]); store.addNotification("StyleSheetNameSpace", refreshStyles) })(jQuery) //%/
/*{{{*/
/*
!CSS
.ns {
   outline:none;
}
.ns_last {
   display:block;
   float:left;
}
.ns .tiddlyLink {
   display:block;
   float:left;
   padding: 0 2px;
}
.ns a.tiddlyLink:hover {
   color:[[ColorPalette::PrimaryDark]];
   background:[[ColorPalette::TertiaryPale]];
}
a.ns_btn {
   color:[[ColorPalette::TertiaryLight]];
   display:block;
   float:left;
   min-width:10px;  
   padding:0 1px;
   text-align:center;
   margin:0;
}
.title a.ns_btn {
   min-width:12px;
   padding:0 4px;
}
a.ns_btn {
   color:[[ColorPalette::PrimaryMid]];
}
a.ns_btn:hover{
   color:[[ColorPalette::PrimaryDark]];
   background:[[ColorPalette::TertiaryPale]];
   border-color:transparent;
}
.popup_ns{
   max-width: 400px;
}
.popup_ns_hr {
   border-top: 1px solid [[ColorPalette::TertiaryMid]];
}
.ns_title .tiddlyLink{
   font-size: 1.2em;
   font-weight: bold;
}
.popup_ns_empty{
   padding: 3px;
}
.popup_ns_info{
   display:block;
   padding:3px;
   margin-bottom:3px;
   background:[[ColorPalette::SecondaryPale]];
}
.ns .tiddlyLink.ns_last,
.ns_btn.ns_btn_add,
.ns_list span .ns_list_add{
   display:none;
}
.ns_list .ns_title,
.ns_list li > span{
   padding-right:30px;
}
.ns_list .ns_title:hover > .ns_list_add,
.ns_list li > span:hover > .ns_list_add{
   display:inline;
}
.ns_add .button{
   font-style: italic;
}
.title.ns{
   min-height: 1em;
}
.ns_clear{
   clear: left;
   display: block;
}
!END */
/*}}}*/