/***
|''Name''|NameSpacePlugin|
|''Author''|[[Tobias Beer|http://tobibeer.tiddlyspace.com]]|
|''Documentation''|http://namespace.tiddlyspace.com|
|''Version''|0.5.1 beta|
|''Source''|https://raw.github.com/tobibeer/TiddlyWikiPlugins/master/plugins/NamesSpacePlugin.min.js|
|''~CoreVersion''|2.6.5|
/%*/
(function (e) { config.macros.view.handler_NameSpace = config.macros.view.handler; config.macros.view.handler = function (e, t, n, r, i, s) { if (n.contains("namespace")) { wikify("<<ns [[" + s.title + "]] " + i + ">>", e) } else { return config.macros.view.handler_NameSpace.apply(this, arguments) } }; config.macros.ns = { defaults: { separator: ":", infoSource: "??ns_info", lnkInfo: "i", lnkInfoTooltip: "info for '%0'", btnLast: "»", txtListBullet: "» ", btnTooltip: "tiddlers under namespace '%0'", txtNoneFound: "No futher items found.", txtMoreItems: "Further items...", lnkOpenElement: "Open '%0'", lnkOpenElementTooltip: "Click to open the tiddler '%0'...", txtTitleCategory: "%0 (category) ", txtTitleNameSpace: "%0 ...", txtTitleElement: "[%0]", btnAddCategoryItem: "<<newTiddler " + 'label:"» Add new category item..." ' + "prompt:\"add new item for category '%0'\" " + 'title:"New item for category %0" ' + "fields:'ns_cat:[[%0]]'" + ">>", btnAddNameSpaceItem: "<<newTiddler " + 'label:"» Add new item..." ' + "prompt:\"add new item under namespace '%0'\" " + 'title:"%0:NewItemTitle"' + ">>" }, handler: function (t, n, r, i, s, o) { var u = [], a = "", f, l, c, h, p, d, v, m, g, y = "", b, w, b, E = this.defaults, S = s.parseParams("anon", null, true), x = r[0], T = getParam(S, "ns", ""), a = getParam(S, "category", ""), c = getParam(S, "element", x), N = getParam(S, "separator", E.separator); if (!x) { x = story.findContainingTiddler(t); x = x ? x.getAttribute("tiddler") : "" } if (!x) return; if (r.contains("popup") && r[0] != "popup") { T = T ? T : x; if (this.getItems(x, T, N, a, true) || !a && T != x) { e(createTiddlyButton(t, getParam(S, "label", T == x ? E.btnLast : N), getParam(S, "tooltip", E.btnTooltip.format([T])), this.click, "ns_btn_popup")).data("params", { tid: x, ns: T, element: c, category: a, sep: N }) } else if (T && T != x) { wikify('{{ns_btn_popup{"""' + N + '"""}}}', out) } return } if (r[0] == "!list") { tids = config.macros.ns.getItems("!list", T, N); for (v = 0; v < 2; v++) { lst = tids[v]; m = lst.length; if (v == 0 && m || v > 0) { y += "\n{{ns_title{[[" + E["txtTitle" + (v == 0 ? "Category" : "NameSpace")].format([T]) + "|" + T + "]]}}}"; info = tids[0].length && v > 0 ? "" : this.getInfo(T); if (info) y += "\n" + info } for (h = 0; h < m; h++) { p = lst[h]; l = p.split(N).length; if (v > 0 && h == 0) { b = [[T.split(N).length, T]] } else if (v == 0 && tids[2].contains(p)) { b = [[p.split(N).length, p]]; w = true } while (b.length && p.indexOf(b[b.length - 1][1]) != 0) { b.pop() } g = ""; for (f = b[0][0]; f < l + (v > 0 ? 0 : 1) ; f++) g += "*"; y += "\n" + g + (tids[2].contains(p) ? " {{ns_title{[[%0|%1]]}}}" : " [[%0|%1]]").format([w ? p : p.substr(b[b.length - 1][1].length + 1), p]); if (!w) b.push([l, p]); w = false } } wikify("{{ns_sitemap{" + y + "\n}}}", t); return } out = createTiddlyElement(t, "span", null, "ns"); a = store.getValue(x, "ns_cat"); if (a) { wikify("[[" + a + "]]<<ns [[" + x + "]] separator:[[" + N + "]] category:[[" + a + "]] popup>>", out) } u = x.split(N); for (d = 0; d < u.length; d++) { c = u[d]; T += d < 1 ? c : N + c; wikify((d == u.length - 1 ? '{{tiddlyLink{"""' + c + '"""}}}' : "[[" + c + "|" + T + "]]") + "<<ns [[" + x + "]] ns:[[" + T + "]] element:[[" + c + "]] separator:[[" + N + "]] popup>>", out) } }, getItems: function (e, t, n, r, i) { var s, o, u, a, f, l, c = store.getTiddlers("title"), h = [[], [], []], p = e === "!list"; for (f = 0; f < c.length; f++) { l = c[f].title, s = store.getValue(l, "ns_cat"), u = e.indexOf(l); if (p) { if (s == t) { h[2].push(l) } } else { if (!p && (l == e || u == 0 && e.substr(u, 1) == n || l == t)) continue; if (r && r == s || !r && e == t && t == s) h[0].push(l); if (r && l.indexOf(r + n) == 0 && l.substr(r.length + 1).indexOf(n) < 0 || !r && l.indexOf(t + n) == 0 && l.substr(t.length + 1).indexOf(n) < 0) h[1].push(l); if (i && h[0].length + h[1].length > 0) return true } } if (p) { for (f = 0; f < c.length; f++) { l = c[f].title; for (o = 0; o < h[2].length; o++) { s = h[2][o]; if (l == s || l.indexOf(s + n) == 0) { h[0].push(l); break } } if (l.indexOf(t + n) == 0) h[1].push(l) } } return i ? false : h }, click: function (t) { var n, r, i, s, o, u, a, f, l, c, h, p = config.macros.ns, d = p.defaults, n = t || window.event, v = Popup.create(this), m = e(this).data("params"), g = m["tid"], y = m["ns"], b = m["element"], w = m["category"], E = m["sep"], S = w || g == y ? "" : store.getValue(y, "ns_cat"); e(v).addClass("popup popup_ns"); h = config.macros.ns.getItems(g, y, E, w ? w : y); for (o = 0; o < 2; o++) { f = h[o]; u = f.length; if (o == 0 && S || w || h[0].length > 0 || o == 1 && !w || w && u > 0) { s = o > 0 ? w ? w : y : S ? S : w ? w : y; p.createListTitle(v, o > 0 ? "NameSpace" : "Category", s, S); i = o > 0 && h[0].length ? "" : p.getInfo(s); if (i) { wikify(i, createTiddlyElement(createTiddlyElement(v, "li"), "span", null, "popup_ns_info")) } } for (r = 0; r < u; r++) { p.createPrettyLink(createTiddlyElement(v, "li"), f[r], d.txtListBullet + f[r].split(E).pop()) } if (o > 0 && u == 0) createTiddlyElement(v, "li", null, "popup_ns_empty", d.txtNoneFound); if (!readOnly && (o > 0 || u > 0 || w)) wikify(d["btnAdd" + (o == 0 ? "Category" : "NameSpace") + "Item"].format([o == 0 ? w ? w : y : y]), createTiddlyElement(v, "li", null, "popup_ns_add")) } if (y != b) { p.createListTitle(v, "Element", b, true); i = p.getInfo(b); if (i) { wikify(i, createTiddlyElement(createTiddlyElement(v, "li"), "span", null, "popup_ns_info")) } } Popup.show(); n.cancelBubble = true; if (n.stopPropagation) n.stopPropagation(); return false }, getInfo: function (e) { var t = this.defaults.separator, n = this.defaults.infoSource, r = n.substr(0, 2), i = n.substr(2), s = e.split(t).pop(); return r == "??" ? store.getValue(e, i) : store.getTiddlerText(e + n + i) }, createPrettyLink: function (e, t, n) { var r = createTiddlyLink(e, t); createTiddlyText(r, n); return r }, createListTitle: function (e, t, n, r) { var i = config.macros.ns; i.createPrettyLink(createTiddlyElement(e, "li", null, "ns_title " + (r ? "popup_ns_hr" : "")), n, i.defaults["txtTitle" + t].format([n])) } }; config.shadowTiddlers["StyleSheetNameSpace"] = "/*{{{*/\n" + ".ns .tiddlyLink {\n" + "   padding: 2px;\n" + "}\n" + ".ns a.tiddlyLink:hover {\n" + "   color:[[ColorPalette::PrimaryDark]];\n" + "   background:[[ColorPalette::TertiaryPale]];\n" + "}\n" + ".ns_btn_popup {\n" + "   color:[[ColorPalette::TertiaryLight]];\n" + "   padding: 2px 4px;\n" + "   margin:0;\n" + "}\n" + "a.ns_btn_popup {\n" + "   color:[[ColorPalette::PrimaryMid]];\n" + "}\n" + "a.ns_btn_popup:hover{\n" + "   color:[[ColorPalette::PrimaryDark]];\n" + "   background:[[ColorPalette::TertiaryPale]];\n" + "   border-color:transparent;\n" + "}\n" + ".popup_ns{\n" + "   max-width: 400px;\n" + "}\n" + ".popup_ns_hr {\n" + "   border-top: 1px solid [[ColorPalette::TertiaryMid]];\n" + "}\n" + ".ns_title .tiddlyLink{\n" + "   font-size: 1.2em;\n" + "   font-weight: bold;\n" + "}\n" + ".popup_ns_add .button{\n" + "   font-style: italic;\n" + "}\n" + ".popup_ns_empty{\n" + "   padding: 3px;\n" + "}\n" + ".popup_ns_info{\n" + "   display:block;\n" + "   padding:3px;\n" + "   margin-bottom:3px;\n" + "   background:[[ColorPalette::SecondaryPale]];\n" + "}\n" + "/*}}}*/"; store.addNotification("StyleSheetNameSpace", refreshStyles) })(jQuery)
//%/